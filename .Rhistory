library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(reshape2)
library(readr)
demographic_file <- "/n/zanderson/SNP-plot-snake-testing/config/1000G_Sample_Demographic_Info.txt"
demographic_df <- read_delim(demographic_file, delim="\t")
file_list_path <- "/n/zanderson/SNP-plot-snake-testing/filtered-annotated-VCFs/file_list.txt"
file_list <- read_delim(file_list_path, delim="\t", col_names= FALSE)$X1
all_snps <- list()
for (bed_file in file_list) {
bed <- red_delim(bed_file, col_names = FALSE, delim = "\t")
colnames(bed) <- c("CHROM", "POS", "ID", "REF", "ALT", "QUAL", "FILTER", "INFO", "FORMAT", "SAMPLE", "GENE", "EXON")
ref <- bed$REF
alt <- bed$ALT
for (i in seq_len(length(ref))) {
    if (nchar(ref[i]) == 1 && nchar(alt[i]) == 1) {
      snp_tag <- paste0("SNP", bed$POS[i], "_", ref[i], "_", alt[i])
      #generates SNP tag if it hasn't been made yet
      if (!snp_tag %in% names(all_snps)) {
        all_snps[[snp_tag]] <- list("GENE" = bed$GENE[i], "EXON" = bed$EXON[i])
      }
    }
  }
} 
for (bed_file in file_list) {
bed <- read_delim(bed_file, col_names = FALSE, delim = "\t")
colnames(bed) <- c("CHROM", "POS", "ID", "REF", "ALT", "QUAL", "FILTER", "INFO", "FORMAT", "SAMPLE", "GENE", "EXON")
ref <- bed$REF
alt <- bed$ALT
for (i in seq_len(length(ref))) {
    if (nchar(ref[i]) == 1 && nchar(alt[i]) == 1) {
      snp_tag <- paste0("SNP", bed$POS[i], "_", ref[i], "_", alt[i])
      #generates SNP tag if it hasn't been made yet
      if (!snp_tag %in% names(all_snps)) {
        all_snps[[snp_tag]] <- list("GENE" = bed$GENE[i], "EXON" = bed$EXON[i])
      }
    }
  }
} 
snp_info <- lapply(all_snps, function(x), list())
snp_info <- lapply(all_snps, function(x) list())
print(all_snps)
for (bed_file in file_list) {
  bed <- read_delim(bed_file, col_names = FALSE, delim = "\t", show_col_types = FALSE)  
  colnames(bed) <- c("CHROM", "POS", "ID", "REF", "ALT", "QUAL", "FILTER", "INFO", "FORMAT", "SAMPLE", "GENE", "EXON")
  
  # Extract reference and alternate alleles as well as genotype data
  ref <- bed$REF
  alt <- bed$ALT
  geno_data <- substr(bed$SAMPLE, start = 1, stop =3)
  for (i in seq_len(nrow(bed))) {
  # Check if "PS" is present in the FORMAT column in the bed dataframe
    if ("PS" %in% strsplit(bed$FORMAT, ":")[[1]]) {
      #retrieve the PS tag from the SAMPLE column as anything after the last colon
      ps_tag <- sapply(strsplit(as.character(bed$SAMPLE), ":"), function(x) tail(x, n = 1))
      #if the PS tag is not a number, set it to NA
      ps_tag[!grepl("^\\d+$", ps_tag)] <- NA
    } else {
      ps_tag <- NA
    }
  }
  # Extract the sample name from the BED file name
  sample_name <- basename(bed_file)
  #extract the sample name by removing anything after _filtered_OPSIN
  sample_name <- sub("-ONT-hg38-.*-guppy-sup-.*$", "", sample_name) # remove file extension
  
  # Initialize a vector to keep track of which SNPs are present in this sample
  snps_present <- rep(FALSE, length(all_snps))
  # Generating snp_tags
  for (i in seq_len(length(ref))) {
    # Checks if the number of characters in ref and alt are both 1 (this would mean the variant is a SNP).
    # If so, then proceed with the rest of the code. 
    if (nchar(ref[i]) == 1 && nchar(alt[i]) == 1) {
      snp_tag <- paste0("SNP", bed$POS[i], "_", ref[i], "_", alt[i])
      if (snp_tag %in% names(all_snps)) {
        # Extract the genotype, PS tag, GENE, and EXON from the SAMPLE column
        genotype <- geno_data[i]
        # If the genotype is "./." or "0/0", set the PS tag to NA
        if (genotype %in% c("./.", "0/0")) {
          ps_tag <- NA
        }
        # Check if the PS tag has already been recorded for this SNP and sample
        #snp_info[[snp_tag]][[sample_name]]$PS is how you would access that information. [snp_tag][[sample_name]] is the path to that information
        if (is.null(snp_info[[snp_tag]][[sample_name]]$PS)) {
          # Record the PS tag
          snp_info[[snp_tag]][[sample_name]]$PS <- ps_tag
        }
        # Intersect the SNP position with the gene and exon regions
        #Assign the GENE and EXON value at the position where bed$POS equals bed$POS[i] to gene and exon variables
        gene <- bed$GENE[bed$POS == bed$POS[i]]
        exon <- bed$EXON[bed$POS == bed$POS[i]]
        snp_info[[snp_tag]][[sample_name]] <- list("genotype" = genotype, "PS" = ps_tag, "ALT" = alt[i], "GENE" = gene, "EXON" = exon)
        # Mark this SNP as present in this sample
        snps_present[names(all_snps) == snp_tag] <- TRUE
      }
    }
  }
  # For any SNPs not present in this sample, add the default genotype
  for (snp_tag in names(all_snps)[!snps_present]) {
#assigns the GENE value for this SNP in all_snps to gene
    gene <- all_snps[[snp_tag]]$GENE
    exon <- all_snps[[snp_tag]]$EXON
    snp_info[[snp_tag]][[sample_name]] <- list("genotype" = "0/0", "PS" = NA, "ALT" = ".", "GENE" = gene, "EXON" = exon)
  }
} 
print(all_snps)
quit()
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(reshape2)
library(readr)
demographic_file <- "/n/zanderson/SNP-plot-snake-testing/config/1000G_Sample_Demographic_Info.txt"
demographic_df <- read_delim(demographic_file, delim = "\t")
file_list_path <- "/n/zanderson/SNP-plot-snake-testing/filtered-annotated-VCFs/file_list.txt"
file_list <- read_delim(file_list_path, delim = "\t", col_names = FALSE)$X1
print(file_list)
all_snps <- list()
for (bed_file in file_list) {
  bed <- read_delim(bed_file, col_names = FALSE, delim = "\t")
# if you are not including exon information, then remove all mentions of exon in this R notebook
  colnames(bed) <- c("CHROM", "POS", "ID", "REF", "ALT", "QUAL", "FILTER", "INFO", "FORMAT", "SAMPLE", "GENE", "EXON")
  
  ref <- bed$REF
  alt <- bed$ALT
  
#checks if the ref and alt are both 1 character
  for (i in seq_len(length(ref))) {
    if (nchar(ref[i]) == 1 && nchar(alt[i]) == 1) {
      snp_tag <- paste0("SNP", bed$POS[i], "_", ref[i], "_", alt[i])
      #generates SNP tag if it hasn't been made yet
      if (!snp_tag %in% names(all_snps)) {
        all_snps[[snp_tag]] <- list("GENE" = bed$GENE[i], "EXON" = bed$EXON[i])
      }
    }
  }
}
snp_info <- lapply(all_snps, function(x) list())
print(all_snps)
print(snp_info)
str(snp_info)
for (bed_file in file_list) {
  bed <- read_delim(bed_file, col_names = FALSE, delim = "\t", show_col_types = FALSE)  
  colnames(bed) <- c("CHROM", "POS", "ID", "REF", "ALT", "QUAL", "FILTER", "INFO", "FORMAT", "SAMPLE", "GENE", "EXON")
  
  # Extract reference and alternate alleles as well as genotype data
  ref <- bed$REF
  alt <- bed$ALT
  geno_data <- substr(bed$SAMPLE, start = 1, stop =3)
for (i in seq_len(nrow(bed))) {
  # Check if "PS" is present in the FORMAT column in the bed dataframe
    if ("PS" %in% strsplit(bed$FORMAT, ":")[[1]]) {
      #retrieve the PS tag from the SAMPLE column as anything after the last colon
      ps_tag <- sapply(strsplit(as.character(bed$SAMPLE), ":"), function(x) tail(x, n = 1))
      #if the PS tag is not a number, set it to NA
      ps_tag[!grepl("^\\d+$", ps_tag)] <- NA
    } else {
      ps_tag <- NA
    }
  }
sample_name <- basename(bed_file)
  #extract the sample name by removing anything after _filtered_OPSIN
  sample_name <- sub("-ONT-hg38-.*-guppy-sup-.*$", "", sample_name) # remove file extension
  
  # Initialize a vector to keep track of which SNPs are present in this sample
  snps_present <- rep(FALSE, length(all_snps))
for (i in seq_len(length(ref))) {
    # Checks if the number of characters in ref and alt are both 1 (this would mean the variant is a SNP).
    # If so, then proceed with the rest of the code. 
    if (nchar(ref[i]) == 1 && nchar(alt[i]) == 1) {
      snp_tag <- paste0("SNP", bed$POS[i], "_", ref[i], "_", alt[i])
      if (snp_tag %in% names(all_snps)) {
        # Extract the genotype, PS tag, GENE, and EXON from the SAMPLE column
        genotype <- geno_data[i]
        # If the genotype is "./." or "0/0", set the PS tag to NA
        if (genotype %in% c("./.", "0/0")) {
          ps_tag <- NA
        }
if (is.null(snp_info[[snp_tag]][[sample_name]]$PS)) {
          # Record the PS tag
          snp_info[[snp_tag]][[sample_name]]$PS <- ps_tag
        }
        # Intersect the SNP position with the gene and exon regions
        #Assign the GENE and EXON value at the position where bed$POS equals bed$POS[i] to gene and exon variables
        gene <- bed$GENE[bed$POS == bed$POS[i]]
        exon <- bed$EXON[bed$POS == bed$POS[i]]
        snp_info[[snp_tag]][[sample_name]] <- list("genotype" = genotype, "PS" = ps_tag, "ALT" = alt[i], "GENE" = gene, "EXON" = exon)
        # Mark this SNP as present in this sample
        snps_present[names(all_snps) == snp_tag] <- TRUE
      }
    }
  }
for (snp_tag in names(all_snps)[!snps_present]) {
#assigns the GENE value for this SNP in all_snps to gene
    gene <- all_snps[[snp_tag]]$GENE
    exon <- all_snps[[snp_tag]]$EXON
    snp_info[[snp_tag]][[sample_name]] <- list("genotype" = "0/0", "PS" = NA, "ALT" = ".", "GENE" = gene, "EXON" = exon)
  }
}
snp_df <- do.call(rbind, lapply(names(snp_info), function(snp_tag) {
  # For each SNP tag in the snp_info list, apply the following function 
  sample_data <- lapply(names(snp_info[[snp_tag]]), function(sample_name) {
    # For each sample name in the current SNP tag, apply the following function 
    # This line checks if the genotype for this SNP and sample is null in snp_info. 
    # If it is, it assigns "0/0" to genotype, otherwise it     assigns the genotype value
    genotype <- ifelse(is.null(snp_info[[snp_tag]][[sample_name]]$genotype), "0/0", snp_info[[snp_tag]][[sample_name]]$genotype)
    
    #This line checks if the PS tag for this SNP and sample is null in snp_info.
    # If it is, it assigns NA to ps, otherwise it assigns the PS value
    ps <- ifelse(is.null(snp_info[[snp_tag]][[sample_name]]$PS), NA, snp_info[[snp_tag]][[sample_name]]$PS)
alt <- ifelse(is.null(snp_info[[snp_tag]][[sample_name]]$ALT), ".", snp_info[[snp_tag]][[sample_name]]$ALT)
    # Check if the GENE tag for this SNP and sample is null in snp_info
    # If it is, assign the NA to gene, otherwise assign the GENE value
    gene <- ifelse(is.null(snp_info[[snp_tag]][[sample_name]]$GENE), NA, snp_info[[snp_tag]][[sample_name]]$GENE)
    exon <- ifelse(is.null(snp_info[[snp_tag]][[sample_name]]$EXON), NA, snp_info[[snp_tag]][[sample_name]]$EXON)
    # Split the genotype into two alleles
    alleles <- strsplit(genotype, "/")[[1]]
data.frame(
      SNP = rep(snp_tag, 2),
      Sample = rep(sample_name, 2),
      Haplotype = 1:2,
      Genotype = alleles,
      PS = rep(ps, 2),
      ALT = rep(alt, 2),
      GENE = rep(gene, 2),
      EXON = rep(exon, 2),
      stringsAsFactors = FALSE
    )
  })
if (length(sample_data) > 0) {
    do.call(rbind, sample_data)
  }
}))
print(class(snp_df))
class(snp_df)
get_allele <- function(genotype, alt, ps, haplotype) {
  if (genotype == "1|0" && haplotype == 1) {
    return(alt)
  } else if (genotype == "0|1" && haplotype == 2) {
    return(alt)
  } else if (genotype == "1" || genotype == "1|1") {
    return(alt)
  }
  return(NA)
}
snp_df$Allele <- mapply(get_allele, snp_df$Genotype, snp_df$ALT, snp_df$PS, snp_df$Haplotype)
head(snp_df)
snp_df <- data.frame()
# Convert the snp_info list to a data frame
snp_df <- do.call(rbind, lapply(names(snp_info), function(snp_tag) {
  # For each SNP tag in the snp_info list, apply the following function 
  sample_data <- lapply(names(snp_info[[snp_tag]]), function(sample_name) {
    # For each sample name in the current SNP tag, apply the following function 
    # This line checks if the genotype for this SNP and sample is null in snp_info. 
    # If it is, it assigns "0/0" to genotype, otherwise it     assigns the genotype value
    genotype <- ifelse(is.null(snp_info[[snp_tag]][[sample_name]]$genotype), "0/0", snp_info[[snp_tag]][[sample_name]]$genotype)
    
    #This line checks if the PS tag for this SNP and sample is null in snp_info.
    # If it is, it assigns NA to ps, otherwise it assigns the PS value
    ps <- ifelse(is.null(snp_info[[snp_tag]][[sample_name]]$PS), NA, snp_info[[snp_tag]][[sample_name]]$PS)
    
    #Check if the ALT tag for this SNP and sample is null in snp_info
    # If it is, assign "." to alt, otherwise assign the ALT value
    alt <- ifelse(is.null(snp_info[[snp_tag]][[sample_name]]$ALT), ".", snp_info[[snp_tag]][[sample_name]]$ALT)
    # Check if the GENE tag for this SNP and sample is null in snp_info
    # If it is, assign the NA to gene, otherwise assign the GENE value
    gene <- ifelse(is.null(snp_info[[snp_tag]][[sample_name]]$GENE), NA, snp_info[[snp_tag]][[sample_name]]$GENE)
    exon <- ifelse(is.null(snp_info[[snp_tag]][[sample_name]]$EXON), NA, snp_info[[snp_tag]][[sample_name]]$EXON)
    # Split the genotype into two alleles
    alleles <- strsplit(genotype, "/")[[1]]
    # Create two rows for this sample, one for each allele
    data.frame(
      SNP = rep(snp_tag, 2),
      Sample = rep(sample_name, 2),
      Haplotype = 1:2,
      Genotype = alleles,
      PS = rep(ps, 2),
      ALT = rep(alt, 2),
      GENE = rep(gene, 2),
      EXON = rep(exon, 2),
      stringsAsFactors = FALSE
    )
  })
  # Only try to combine the data if there's at least one sample with data
  print(paste("Sample data for SNP tag:", snp_tag))
  print(sample_data)
  if (length(sample_data) > 0) {
    combined_data <- do.call(rbind, sample_data)
    print(paste("Combined data for SNP tag:", snp_tag))
    print(combined_data)
    return(combined_data)
  } else {
    return(NULL)
  }
}))
print(snp_df
)
print(all_snps)
str(snp_info)
quit()
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(reshape2)
library(readr)
demographic_file <- "/n/zanderson/SNP-plot-snake-testing/config/1000G_Sample_Demographic_Info.txt"
demographic_df <- read_delim(demographic_file, delim="\t")
file_list_path <- "/n/zanderson/SNP-plot-snake-testing/filtered-annotated-VCFs/file_list.txt"
file_list <- read_delim(file_list_path, delim="\t", col_names=FALSE)$X1
print(file_list)
# Initialize an empty list to store all unique SNPs
all_snps <- list()
for (bed_file in file_list) {
  bed <- read_delim(bed_file, col_names = FALSE, delim = "\t")
# if you are not including exon information, then remove all mentions of exon in this R notebook
  colnames(bed) <- c("CHROM", "POS", "ID", "REF", "ALT", "QUAL", "FILTER", "INFO", "FORMAT", "SAMPLE", "GENE", "EXON")
  print(bed)
  ref <- bed$REF
  alt <- bed$ALT
  
#checks if the ref and alt are both 1 character
  for (i in seq_len(length(ref))) {
    if (nchar(ref[i]) == 1 && nchar(alt[i]) == 1) {
      snp_tag <- paste0("SNP", bed$POS[i], "_", ref[i], "_", alt[i])
      #generates SNP tag if it hasn't been made yet
      if (!snp_tag %in% names(all_snps)) {
        all_snps[[snp_tag]] <- list("GENE" = bed$GENE[i], "EXON" = bed$EXON[i])
        print(pasete("Added SNP tag to all_snps:", snp_tag))
        print("printing all_snps[[snp_tag]]")
        print(all_snps[[snp_tag]])
      }
    }
  }
}
print(all_snps)
quit()
